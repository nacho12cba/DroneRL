// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: State.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "State.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gymfc {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* State_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  State_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* State_StatusCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_State_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_State_2eproto() {
  protobuf_AddDesc_State_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "State.proto");
  GOOGLE_CHECK(file != NULL);
  State_descriptor_ = file->message_type(0);
  static const int State_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, sim_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, imu_angular_velocity_rpy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, imu_linear_acceleration_xyz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, imu_orientation_quat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, esc_motor_angular_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, esc_temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, esc_current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, esc_voltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, esc_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, esc_torque_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, vbat_voltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, vbat_current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, status_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, force_),
  };
  State_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      State_descriptor_,
      State::default_instance_,
      State_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, _has_bits_[0]),
      -1,
      -1,
      sizeof(State),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, _internal_metadata_),
      -1);
  State_StatusCode_descriptor_ = State_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_State_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      State_descriptor_, &State::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_State_2eproto() {
  delete State::default_instance_;
  delete State_reflection_;
}

void protobuf_AddDesc_State_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_State_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013State.proto\022\ngymfc.msgs\"\303\003\n\005State\022\020\n\010s"
    "im_time\030\001 \002(\002\022$\n\030imu_angular_velocity_rp"
    "y\030\002 \003(\002B\002\020\001\022\'\n\033imu_linear_acceleration_x"
    "yz\030\003 \003(\002B\002\020\001\022 \n\024imu_orientation_quat\030\004 \003"
    "(\002B\002\020\001\022&\n\032esc_motor_angular_velocity\030\005 \003"
    "(\002B\002\020\001\022\033\n\017esc_temperature\030\006 \003(\002B\002\020\001\022\027\n\013e"
    "sc_current\030\007 \003(\002B\002\020\001\022\027\n\013esc_voltage\030\010 \003("
    "\002B\002\020\001\022\025\n\tesc_force\030\t \003(\002B\002\020\001\022\026\n\nesc_torq"
    "ue\030\n \003(\002B\002\020\001\022\024\n\014vbat_voltage\030\013 \001(\002\022\024\n\014vb"
    "at_current\030\014 \001(\002\0221\n\013status_code\030\r \002(\0162\034."
    "gymfc.msgs.State.StatusCode\022\021\n\005force\030\016 \003"
    "(\002B\002\020\001\"\037\n\nStatusCode\022\006\n\002OK\020\000\022\t\n\005ERROR\020\001", 479);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "State.proto", &protobuf_RegisterTypes);
  State::default_instance_ = new State();
  State::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_State_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_State_2eproto {
  StaticDescriptorInitializer_State_2eproto() {
    protobuf_AddDesc_State_2eproto();
  }
} static_descriptor_initializer_State_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* State_StatusCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return State_StatusCode_descriptor_;
}
bool State_StatusCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const State_StatusCode State::OK;
const State_StatusCode State::ERROR;
const State_StatusCode State::StatusCode_MIN;
const State_StatusCode State::StatusCode_MAX;
const int State::StatusCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int State::kSimTimeFieldNumber;
const int State::kImuAngularVelocityRpyFieldNumber;
const int State::kImuLinearAccelerationXyzFieldNumber;
const int State::kImuOrientationQuatFieldNumber;
const int State::kEscMotorAngularVelocityFieldNumber;
const int State::kEscTemperatureFieldNumber;
const int State::kEscCurrentFieldNumber;
const int State::kEscVoltageFieldNumber;
const int State::kEscForceFieldNumber;
const int State::kEscTorqueFieldNumber;
const int State::kVbatVoltageFieldNumber;
const int State::kVbatCurrentFieldNumber;
const int State::kStatusCodeFieldNumber;
const int State::kForceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

State::State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gymfc.msgs.State)
}

void State::InitAsDefaultInstance() {
}

State::State(const State& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gymfc.msgs.State)
}

void State::SharedCtor() {
  _cached_size_ = 0;
  sim_time_ = 0;
  vbat_voltage_ = 0;
  vbat_current_ = 0;
  status_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

State::~State() {
  // @@protoc_insertion_point(destructor:gymfc.msgs.State)
  SharedDtor();
}

void State::SharedDtor() {
  if (this != default_instance_) {
  }
}

void State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* State::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return State_descriptor_;
}

const State& State::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_State_2eproto();
  return *default_instance_;
}

State* State::default_instance_ = NULL;

State* State::New(::google::protobuf::Arena* arena) const {
  State* n = new State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void State::Clear() {
// @@protoc_insertion_point(message_clear_start:gymfc.msgs.State)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(State, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<State*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  sim_time_ = 0;
  if (_has_bits_[8 / 32] & 7168u) {
    ZR_(vbat_current_, status_code_);
    vbat_voltage_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  imu_angular_velocity_rpy_.Clear();
  imu_linear_acceleration_xyz_.Clear();
  imu_orientation_quat_.Clear();
  esc_motor_angular_velocity_.Clear();
  esc_temperature_.Clear();
  esc_current_.Clear();
  esc_voltage_.Clear();
  esc_force_.Clear();
  esc_torque_.Clear();
  force_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gymfc.msgs.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float sim_time = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sim_time_)));
          set_has_sim_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_imu_angular_velocity_rpy;
        break;
      }

      // repeated float imu_angular_velocity_rpy = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_imu_angular_velocity_rpy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_imu_angular_velocity_rpy())));
        } else if (tag == 21) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18, input, this->mutable_imu_angular_velocity_rpy())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_imu_linear_acceleration_xyz;
        break;
      }

      // repeated float imu_linear_acceleration_xyz = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_imu_linear_acceleration_xyz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_imu_linear_acceleration_xyz())));
        } else if (tag == 29) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_imu_linear_acceleration_xyz())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_imu_orientation_quat;
        break;
      }

      // repeated float imu_orientation_quat = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_imu_orientation_quat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_imu_orientation_quat())));
        } else if (tag == 37) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34, input, this->mutable_imu_orientation_quat())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_esc_motor_angular_velocity;
        break;
      }

      // repeated float esc_motor_angular_velocity = 5 [packed = true];
      case 5: {
        if (tag == 42) {
         parse_esc_motor_angular_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_esc_motor_angular_velocity())));
        } else if (tag == 45) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42, input, this->mutable_esc_motor_angular_velocity())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_esc_temperature;
        break;
      }

      // repeated float esc_temperature = 6 [packed = true];
      case 6: {
        if (tag == 50) {
         parse_esc_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_esc_temperature())));
        } else if (tag == 53) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50, input, this->mutable_esc_temperature())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_esc_current;
        break;
      }

      // repeated float esc_current = 7 [packed = true];
      case 7: {
        if (tag == 58) {
         parse_esc_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_esc_current())));
        } else if (tag == 61) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 58, input, this->mutable_esc_current())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_esc_voltage;
        break;
      }

      // repeated float esc_voltage = 8 [packed = true];
      case 8: {
        if (tag == 66) {
         parse_esc_voltage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_esc_voltage())));
        } else if (tag == 69) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 66, input, this->mutable_esc_voltage())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_esc_force;
        break;
      }

      // repeated float esc_force = 9 [packed = true];
      case 9: {
        if (tag == 74) {
         parse_esc_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_esc_force())));
        } else if (tag == 77) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 74, input, this->mutable_esc_force())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_esc_torque;
        break;
      }

      // repeated float esc_torque = 10 [packed = true];
      case 10: {
        if (tag == 82) {
         parse_esc_torque:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_esc_torque())));
        } else if (tag == 85) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 82, input, this->mutable_esc_torque())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_vbat_voltage;
        break;
      }

      // optional float vbat_voltage = 11;
      case 11: {
        if (tag == 93) {
         parse_vbat_voltage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vbat_voltage_)));
          set_has_vbat_voltage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_vbat_current;
        break;
      }

      // optional float vbat_current = 12;
      case 12: {
        if (tag == 101) {
         parse_vbat_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vbat_current_)));
          set_has_vbat_current();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_status_code;
        break;
      }

      // required .gymfc.msgs.State.StatusCode status_code = 13;
      case 13: {
        if (tag == 104) {
         parse_status_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gymfc::msgs::State_StatusCode_IsValid(value)) {
            set_status_code(static_cast< ::gymfc::msgs::State_StatusCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_force;
        break;
      }

      // repeated float force = 14 [packed = true];
      case 14: {
        if (tag == 114) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_force())));
        } else if (tag == 117) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 114, input, this->mutable_force())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gymfc.msgs.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gymfc.msgs.State)
  return false;
#undef DO_
}

void State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gymfc.msgs.State)
  // required float sim_time = 1;
  if (has_sim_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->sim_time(), output);
  }

  // repeated float imu_angular_velocity_rpy = 2 [packed = true];
  if (this->imu_angular_velocity_rpy_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_imu_angular_velocity_rpy_cached_byte_size_);
  }
  for (int i = 0; i < this->imu_angular_velocity_rpy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->imu_angular_velocity_rpy(i), output);
  }

  // repeated float imu_linear_acceleration_xyz = 3 [packed = true];
  if (this->imu_linear_acceleration_xyz_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_imu_linear_acceleration_xyz_cached_byte_size_);
  }
  for (int i = 0; i < this->imu_linear_acceleration_xyz_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->imu_linear_acceleration_xyz(i), output);
  }

  // repeated float imu_orientation_quat = 4 [packed = true];
  if (this->imu_orientation_quat_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_imu_orientation_quat_cached_byte_size_);
  }
  for (int i = 0; i < this->imu_orientation_quat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->imu_orientation_quat(i), output);
  }

  // repeated float esc_motor_angular_velocity = 5 [packed = true];
  if (this->esc_motor_angular_velocity_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_esc_motor_angular_velocity_cached_byte_size_);
  }
  for (int i = 0; i < this->esc_motor_angular_velocity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->esc_motor_angular_velocity(i), output);
  }

  // repeated float esc_temperature = 6 [packed = true];
  if (this->esc_temperature_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_esc_temperature_cached_byte_size_);
  }
  for (int i = 0; i < this->esc_temperature_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->esc_temperature(i), output);
  }

  // repeated float esc_current = 7 [packed = true];
  if (this->esc_current_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_esc_current_cached_byte_size_);
  }
  for (int i = 0; i < this->esc_current_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->esc_current(i), output);
  }

  // repeated float esc_voltage = 8 [packed = true];
  if (this->esc_voltage_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_esc_voltage_cached_byte_size_);
  }
  for (int i = 0; i < this->esc_voltage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->esc_voltage(i), output);
  }

  // repeated float esc_force = 9 [packed = true];
  if (this->esc_force_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_esc_force_cached_byte_size_);
  }
  for (int i = 0; i < this->esc_force_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->esc_force(i), output);
  }

  // repeated float esc_torque = 10 [packed = true];
  if (this->esc_torque_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_esc_torque_cached_byte_size_);
  }
  for (int i = 0; i < this->esc_torque_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->esc_torque(i), output);
  }

  // optional float vbat_voltage = 11;
  if (has_vbat_voltage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->vbat_voltage(), output);
  }

  // optional float vbat_current = 12;
  if (has_vbat_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->vbat_current(), output);
  }

  // required .gymfc.msgs.State.StatusCode status_code = 13;
  if (has_status_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->status_code(), output);
  }

  // repeated float force = 14 [packed = true];
  if (this->force_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(14, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_force_cached_byte_size_);
  }
  for (int i = 0; i < this->force_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->force(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gymfc.msgs.State)
}

::google::protobuf::uint8* State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gymfc.msgs.State)
  // required float sim_time = 1;
  if (has_sim_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->sim_time(), target);
  }

  // repeated float imu_angular_velocity_rpy = 2 [packed = true];
  if (this->imu_angular_velocity_rpy_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _imu_angular_velocity_rpy_cached_byte_size_, target);
  }
  for (int i = 0; i < this->imu_angular_velocity_rpy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->imu_angular_velocity_rpy(i), target);
  }

  // repeated float imu_linear_acceleration_xyz = 3 [packed = true];
  if (this->imu_linear_acceleration_xyz_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _imu_linear_acceleration_xyz_cached_byte_size_, target);
  }
  for (int i = 0; i < this->imu_linear_acceleration_xyz_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->imu_linear_acceleration_xyz(i), target);
  }

  // repeated float imu_orientation_quat = 4 [packed = true];
  if (this->imu_orientation_quat_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _imu_orientation_quat_cached_byte_size_, target);
  }
  for (int i = 0; i < this->imu_orientation_quat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->imu_orientation_quat(i), target);
  }

  // repeated float esc_motor_angular_velocity = 5 [packed = true];
  if (this->esc_motor_angular_velocity_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _esc_motor_angular_velocity_cached_byte_size_, target);
  }
  for (int i = 0; i < this->esc_motor_angular_velocity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->esc_motor_angular_velocity(i), target);
  }

  // repeated float esc_temperature = 6 [packed = true];
  if (this->esc_temperature_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _esc_temperature_cached_byte_size_, target);
  }
  for (int i = 0; i < this->esc_temperature_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->esc_temperature(i), target);
  }

  // repeated float esc_current = 7 [packed = true];
  if (this->esc_current_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _esc_current_cached_byte_size_, target);
  }
  for (int i = 0; i < this->esc_current_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->esc_current(i), target);
  }

  // repeated float esc_voltage = 8 [packed = true];
  if (this->esc_voltage_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _esc_voltage_cached_byte_size_, target);
  }
  for (int i = 0; i < this->esc_voltage_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->esc_voltage(i), target);
  }

  // repeated float esc_force = 9 [packed = true];
  if (this->esc_force_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _esc_force_cached_byte_size_, target);
  }
  for (int i = 0; i < this->esc_force_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->esc_force(i), target);
  }

  // repeated float esc_torque = 10 [packed = true];
  if (this->esc_torque_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _esc_torque_cached_byte_size_, target);
  }
  for (int i = 0; i < this->esc_torque_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->esc_torque(i), target);
  }

  // optional float vbat_voltage = 11;
  if (has_vbat_voltage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->vbat_voltage(), target);
  }

  // optional float vbat_current = 12;
  if (has_vbat_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->vbat_current(), target);
  }

  // required .gymfc.msgs.State.StatusCode status_code = 13;
  if (has_status_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->status_code(), target);
  }

  // repeated float force = 14 [packed = true];
  if (this->force_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      14,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _force_cached_byte_size_, target);
  }
  for (int i = 0; i < this->force_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->force(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gymfc.msgs.State)
  return target;
}

int State::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gymfc.msgs.State)
  int total_size = 0;

  if (has_sim_time()) {
    // required float sim_time = 1;
    total_size += 1 + 4;
  }

  if (has_status_code()) {
    // required .gymfc.msgs.State.StatusCode status_code = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status_code());
  }

  return total_size;
}
int State::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gymfc.msgs.State)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00001001) ^ 0x00001001) == 0) {  // All required fields are present.
    // required float sim_time = 1;
    total_size += 1 + 4;

    // required .gymfc.msgs.State.StatusCode status_code = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[10 / 32] & 3072u) {
    // optional float vbat_voltage = 11;
    if (has_vbat_voltage()) {
      total_size += 1 + 4;
    }

    // optional float vbat_current = 12;
    if (has_vbat_current()) {
      total_size += 1 + 4;
    }

  }
  // repeated float imu_angular_velocity_rpy = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->imu_angular_velocity_rpy_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _imu_angular_velocity_rpy_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float imu_linear_acceleration_xyz = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->imu_linear_acceleration_xyz_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _imu_linear_acceleration_xyz_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float imu_orientation_quat = 4 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->imu_orientation_quat_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _imu_orientation_quat_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float esc_motor_angular_velocity = 5 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->esc_motor_angular_velocity_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _esc_motor_angular_velocity_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float esc_temperature = 6 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->esc_temperature_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _esc_temperature_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float esc_current = 7 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->esc_current_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _esc_current_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float esc_voltage = 8 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->esc_voltage_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _esc_voltage_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float esc_force = 9 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->esc_force_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _esc_force_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float esc_torque = 10 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->esc_torque_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _esc_torque_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float force = 14 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->force_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _force_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gymfc.msgs.State)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const State* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gymfc.msgs.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gymfc.msgs.State)
    MergeFrom(*source);
  }
}

void State::MergeFrom(const State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gymfc.msgs.State)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  imu_angular_velocity_rpy_.MergeFrom(from.imu_angular_velocity_rpy_);
  imu_linear_acceleration_xyz_.MergeFrom(from.imu_linear_acceleration_xyz_);
  imu_orientation_quat_.MergeFrom(from.imu_orientation_quat_);
  esc_motor_angular_velocity_.MergeFrom(from.esc_motor_angular_velocity_);
  esc_temperature_.MergeFrom(from.esc_temperature_);
  esc_current_.MergeFrom(from.esc_current_);
  esc_voltage_.MergeFrom(from.esc_voltage_);
  esc_force_.MergeFrom(from.esc_force_);
  esc_torque_.MergeFrom(from.esc_torque_);
  force_.MergeFrom(from.force_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sim_time()) {
      set_sim_time(from.sim_time());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_vbat_voltage()) {
      set_vbat_voltage(from.vbat_voltage());
    }
    if (from.has_vbat_current()) {
      set_vbat_current(from.vbat_current());
    }
    if (from.has_status_code()) {
      set_status_code(from.status_code());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gymfc.msgs.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gymfc.msgs.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001001) != 0x00001001) return false;

  return true;
}

void State::Swap(State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void State::InternalSwap(State* other) {
  std::swap(sim_time_, other->sim_time_);
  imu_angular_velocity_rpy_.UnsafeArenaSwap(&other->imu_angular_velocity_rpy_);
  imu_linear_acceleration_xyz_.UnsafeArenaSwap(&other->imu_linear_acceleration_xyz_);
  imu_orientation_quat_.UnsafeArenaSwap(&other->imu_orientation_quat_);
  esc_motor_angular_velocity_.UnsafeArenaSwap(&other->esc_motor_angular_velocity_);
  esc_temperature_.UnsafeArenaSwap(&other->esc_temperature_);
  esc_current_.UnsafeArenaSwap(&other->esc_current_);
  esc_voltage_.UnsafeArenaSwap(&other->esc_voltage_);
  esc_force_.UnsafeArenaSwap(&other->esc_force_);
  esc_torque_.UnsafeArenaSwap(&other->esc_torque_);
  std::swap(vbat_voltage_, other->vbat_voltage_);
  std::swap(vbat_current_, other->vbat_current_);
  std::swap(status_code_, other->status_code_);
  force_.UnsafeArenaSwap(&other->force_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata State::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = State_descriptor_;
  metadata.reflection = State_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// State

// required float sim_time = 1;
bool State::has_sim_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void State::set_has_sim_time() {
  _has_bits_[0] |= 0x00000001u;
}
void State::clear_has_sim_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void State::clear_sim_time() {
  sim_time_ = 0;
  clear_has_sim_time();
}
 float State::sim_time() const {
  // @@protoc_insertion_point(field_get:gymfc.msgs.State.sim_time)
  return sim_time_;
}
 void State::set_sim_time(float value) {
  set_has_sim_time();
  sim_time_ = value;
  // @@protoc_insertion_point(field_set:gymfc.msgs.State.sim_time)
}

// repeated float imu_angular_velocity_rpy = 2 [packed = true];
int State::imu_angular_velocity_rpy_size() const {
  return imu_angular_velocity_rpy_.size();
}
void State::clear_imu_angular_velocity_rpy() {
  imu_angular_velocity_rpy_.Clear();
}
 float State::imu_angular_velocity_rpy(int index) const {
  // @@protoc_insertion_point(field_get:gymfc.msgs.State.imu_angular_velocity_rpy)
  return imu_angular_velocity_rpy_.Get(index);
}
 void State::set_imu_angular_velocity_rpy(int index, float value) {
  imu_angular_velocity_rpy_.Set(index, value);
  // @@protoc_insertion_point(field_set:gymfc.msgs.State.imu_angular_velocity_rpy)
}
 void State::add_imu_angular_velocity_rpy(float value) {
  imu_angular_velocity_rpy_.Add(value);
  // @@protoc_insertion_point(field_add:gymfc.msgs.State.imu_angular_velocity_rpy)
}
 const ::google::protobuf::RepeatedField< float >&
State::imu_angular_velocity_rpy() const {
  // @@protoc_insertion_point(field_list:gymfc.msgs.State.imu_angular_velocity_rpy)
  return imu_angular_velocity_rpy_;
}
 ::google::protobuf::RepeatedField< float >*
State::mutable_imu_angular_velocity_rpy() {
  // @@protoc_insertion_point(field_mutable_list:gymfc.msgs.State.imu_angular_velocity_rpy)
  return &imu_angular_velocity_rpy_;
}

// repeated float imu_linear_acceleration_xyz = 3 [packed = true];
int State::imu_linear_acceleration_xyz_size() const {
  return imu_linear_acceleration_xyz_.size();
}
void State::clear_imu_linear_acceleration_xyz() {
  imu_linear_acceleration_xyz_.Clear();
}
 float State::imu_linear_acceleration_xyz(int index) const {
  // @@protoc_insertion_point(field_get:gymfc.msgs.State.imu_linear_acceleration_xyz)
  return imu_linear_acceleration_xyz_.Get(index);
}
 void State::set_imu_linear_acceleration_xyz(int index, float value) {
  imu_linear_acceleration_xyz_.Set(index, value);
  // @@protoc_insertion_point(field_set:gymfc.msgs.State.imu_linear_acceleration_xyz)
}
 void State::add_imu_linear_acceleration_xyz(float value) {
  imu_linear_acceleration_xyz_.Add(value);
  // @@protoc_insertion_point(field_add:gymfc.msgs.State.imu_linear_acceleration_xyz)
}
 const ::google::protobuf::RepeatedField< float >&
State::imu_linear_acceleration_xyz() const {
  // @@protoc_insertion_point(field_list:gymfc.msgs.State.imu_linear_acceleration_xyz)
  return imu_linear_acceleration_xyz_;
}
 ::google::protobuf::RepeatedField< float >*
State::mutable_imu_linear_acceleration_xyz() {
  // @@protoc_insertion_point(field_mutable_list:gymfc.msgs.State.imu_linear_acceleration_xyz)
  return &imu_linear_acceleration_xyz_;
}

// repeated float imu_orientation_quat = 4 [packed = true];
int State::imu_orientation_quat_size() const {
  return imu_orientation_quat_.size();
}
void State::clear_imu_orientation_quat() {
  imu_orientation_quat_.Clear();
}
 float State::imu_orientation_quat(int index) const {
  // @@protoc_insertion_point(field_get:gymfc.msgs.State.imu_orientation_quat)
  return imu_orientation_quat_.Get(index);
}
 void State::set_imu_orientation_quat(int index, float value) {
  imu_orientation_quat_.Set(index, value);
  // @@protoc_insertion_point(field_set:gymfc.msgs.State.imu_orientation_quat)
}
 void State::add_imu_orientation_quat(float value) {
  imu_orientation_quat_.Add(value);
  // @@protoc_insertion_point(field_add:gymfc.msgs.State.imu_orientation_quat)
}
 const ::google::protobuf::RepeatedField< float >&
State::imu_orientation_quat() const {
  // @@protoc_insertion_point(field_list:gymfc.msgs.State.imu_orientation_quat)
  return imu_orientation_quat_;
}
 ::google::protobuf::RepeatedField< float >*
State::mutable_imu_orientation_quat() {
  // @@protoc_insertion_point(field_mutable_list:gymfc.msgs.State.imu_orientation_quat)
  return &imu_orientation_quat_;
}

// repeated float esc_motor_angular_velocity = 5 [packed = true];
int State::esc_motor_angular_velocity_size() const {
  return esc_motor_angular_velocity_.size();
}
void State::clear_esc_motor_angular_velocity() {
  esc_motor_angular_velocity_.Clear();
}
 float State::esc_motor_angular_velocity(int index) const {
  // @@protoc_insertion_point(field_get:gymfc.msgs.State.esc_motor_angular_velocity)
  return esc_motor_angular_velocity_.Get(index);
}
 void State::set_esc_motor_angular_velocity(int index, float value) {
  esc_motor_angular_velocity_.Set(index, value);
  // @@protoc_insertion_point(field_set:gymfc.msgs.State.esc_motor_angular_velocity)
}
 void State::add_esc_motor_angular_velocity(float value) {
  esc_motor_angular_velocity_.Add(value);
  // @@protoc_insertion_point(field_add:gymfc.msgs.State.esc_motor_angular_velocity)
}
 const ::google::protobuf::RepeatedField< float >&
State::esc_motor_angular_velocity() const {
  // @@protoc_insertion_point(field_list:gymfc.msgs.State.esc_motor_angular_velocity)
  return esc_motor_angular_velocity_;
}
 ::google::protobuf::RepeatedField< float >*
State::mutable_esc_motor_angular_velocity() {
  // @@protoc_insertion_point(field_mutable_list:gymfc.msgs.State.esc_motor_angular_velocity)
  return &esc_motor_angular_velocity_;
}

// repeated float esc_temperature = 6 [packed = true];
int State::esc_temperature_size() const {
  return esc_temperature_.size();
}
void State::clear_esc_temperature() {
  esc_temperature_.Clear();
}
 float State::esc_temperature(int index) const {
  // @@protoc_insertion_point(field_get:gymfc.msgs.State.esc_temperature)
  return esc_temperature_.Get(index);
}
 void State::set_esc_temperature(int index, float value) {
  esc_temperature_.Set(index, value);
  // @@protoc_insertion_point(field_set:gymfc.msgs.State.esc_temperature)
}
 void State::add_esc_temperature(float value) {
  esc_temperature_.Add(value);
  // @@protoc_insertion_point(field_add:gymfc.msgs.State.esc_temperature)
}
 const ::google::protobuf::RepeatedField< float >&
State::esc_temperature() const {
  // @@protoc_insertion_point(field_list:gymfc.msgs.State.esc_temperature)
  return esc_temperature_;
}
 ::google::protobuf::RepeatedField< float >*
State::mutable_esc_temperature() {
  // @@protoc_insertion_point(field_mutable_list:gymfc.msgs.State.esc_temperature)
  return &esc_temperature_;
}

// repeated float esc_current = 7 [packed = true];
int State::esc_current_size() const {
  return esc_current_.size();
}
void State::clear_esc_current() {
  esc_current_.Clear();
}
 float State::esc_current(int index) const {
  // @@protoc_insertion_point(field_get:gymfc.msgs.State.esc_current)
  return esc_current_.Get(index);
}
 void State::set_esc_current(int index, float value) {
  esc_current_.Set(index, value);
  // @@protoc_insertion_point(field_set:gymfc.msgs.State.esc_current)
}
 void State::add_esc_current(float value) {
  esc_current_.Add(value);
  // @@protoc_insertion_point(field_add:gymfc.msgs.State.esc_current)
}
 const ::google::protobuf::RepeatedField< float >&
State::esc_current() const {
  // @@protoc_insertion_point(field_list:gymfc.msgs.State.esc_current)
  return esc_current_;
}
 ::google::protobuf::RepeatedField< float >*
State::mutable_esc_current() {
  // @@protoc_insertion_point(field_mutable_list:gymfc.msgs.State.esc_current)
  return &esc_current_;
}

// repeated float esc_voltage = 8 [packed = true];
int State::esc_voltage_size() const {
  return esc_voltage_.size();
}
void State::clear_esc_voltage() {
  esc_voltage_.Clear();
}
 float State::esc_voltage(int index) const {
  // @@protoc_insertion_point(field_get:gymfc.msgs.State.esc_voltage)
  return esc_voltage_.Get(index);
}
 void State::set_esc_voltage(int index, float value) {
  esc_voltage_.Set(index, value);
  // @@protoc_insertion_point(field_set:gymfc.msgs.State.esc_voltage)
}
 void State::add_esc_voltage(float value) {
  esc_voltage_.Add(value);
  // @@protoc_insertion_point(field_add:gymfc.msgs.State.esc_voltage)
}
 const ::google::protobuf::RepeatedField< float >&
State::esc_voltage() const {
  // @@protoc_insertion_point(field_list:gymfc.msgs.State.esc_voltage)
  return esc_voltage_;
}
 ::google::protobuf::RepeatedField< float >*
State::mutable_esc_voltage() {
  // @@protoc_insertion_point(field_mutable_list:gymfc.msgs.State.esc_voltage)
  return &esc_voltage_;
}

// repeated float esc_force = 9 [packed = true];
int State::esc_force_size() const {
  return esc_force_.size();
}
void State::clear_esc_force() {
  esc_force_.Clear();
}
 float State::esc_force(int index) const {
  // @@protoc_insertion_point(field_get:gymfc.msgs.State.esc_force)
  return esc_force_.Get(index);
}
 void State::set_esc_force(int index, float value) {
  esc_force_.Set(index, value);
  // @@protoc_insertion_point(field_set:gymfc.msgs.State.esc_force)
}
 void State::add_esc_force(float value) {
  esc_force_.Add(value);
  // @@protoc_insertion_point(field_add:gymfc.msgs.State.esc_force)
}
 const ::google::protobuf::RepeatedField< float >&
State::esc_force() const {
  // @@protoc_insertion_point(field_list:gymfc.msgs.State.esc_force)
  return esc_force_;
}
 ::google::protobuf::RepeatedField< float >*
State::mutable_esc_force() {
  // @@protoc_insertion_point(field_mutable_list:gymfc.msgs.State.esc_force)
  return &esc_force_;
}

// repeated float esc_torque = 10 [packed = true];
int State::esc_torque_size() const {
  return esc_torque_.size();
}
void State::clear_esc_torque() {
  esc_torque_.Clear();
}
 float State::esc_torque(int index) const {
  // @@protoc_insertion_point(field_get:gymfc.msgs.State.esc_torque)
  return esc_torque_.Get(index);
}
 void State::set_esc_torque(int index, float value) {
  esc_torque_.Set(index, value);
  // @@protoc_insertion_point(field_set:gymfc.msgs.State.esc_torque)
}
 void State::add_esc_torque(float value) {
  esc_torque_.Add(value);
  // @@protoc_insertion_point(field_add:gymfc.msgs.State.esc_torque)
}
 const ::google::protobuf::RepeatedField< float >&
State::esc_torque() const {
  // @@protoc_insertion_point(field_list:gymfc.msgs.State.esc_torque)
  return esc_torque_;
}
 ::google::protobuf::RepeatedField< float >*
State::mutable_esc_torque() {
  // @@protoc_insertion_point(field_mutable_list:gymfc.msgs.State.esc_torque)
  return &esc_torque_;
}

// optional float vbat_voltage = 11;
bool State::has_vbat_voltage() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void State::set_has_vbat_voltage() {
  _has_bits_[0] |= 0x00000400u;
}
void State::clear_has_vbat_voltage() {
  _has_bits_[0] &= ~0x00000400u;
}
void State::clear_vbat_voltage() {
  vbat_voltage_ = 0;
  clear_has_vbat_voltage();
}
 float State::vbat_voltage() const {
  // @@protoc_insertion_point(field_get:gymfc.msgs.State.vbat_voltage)
  return vbat_voltage_;
}
 void State::set_vbat_voltage(float value) {
  set_has_vbat_voltage();
  vbat_voltage_ = value;
  // @@protoc_insertion_point(field_set:gymfc.msgs.State.vbat_voltage)
}

// optional float vbat_current = 12;
bool State::has_vbat_current() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void State::set_has_vbat_current() {
  _has_bits_[0] |= 0x00000800u;
}
void State::clear_has_vbat_current() {
  _has_bits_[0] &= ~0x00000800u;
}
void State::clear_vbat_current() {
  vbat_current_ = 0;
  clear_has_vbat_current();
}
 float State::vbat_current() const {
  // @@protoc_insertion_point(field_get:gymfc.msgs.State.vbat_current)
  return vbat_current_;
}
 void State::set_vbat_current(float value) {
  set_has_vbat_current();
  vbat_current_ = value;
  // @@protoc_insertion_point(field_set:gymfc.msgs.State.vbat_current)
}

// required .gymfc.msgs.State.StatusCode status_code = 13;
bool State::has_status_code() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void State::set_has_status_code() {
  _has_bits_[0] |= 0x00001000u;
}
void State::clear_has_status_code() {
  _has_bits_[0] &= ~0x00001000u;
}
void State::clear_status_code() {
  status_code_ = 0;
  clear_has_status_code();
}
 ::gymfc::msgs::State_StatusCode State::status_code() const {
  // @@protoc_insertion_point(field_get:gymfc.msgs.State.status_code)
  return static_cast< ::gymfc::msgs::State_StatusCode >(status_code_);
}
 void State::set_status_code(::gymfc::msgs::State_StatusCode value) {
  assert(::gymfc::msgs::State_StatusCode_IsValid(value));
  set_has_status_code();
  status_code_ = value;
  // @@protoc_insertion_point(field_set:gymfc.msgs.State.status_code)
}

// repeated float force = 14 [packed = true];
int State::force_size() const {
  return force_.size();
}
void State::clear_force() {
  force_.Clear();
}
 float State::force(int index) const {
  // @@protoc_insertion_point(field_get:gymfc.msgs.State.force)
  return force_.Get(index);
}
 void State::set_force(int index, float value) {
  force_.Set(index, value);
  // @@protoc_insertion_point(field_set:gymfc.msgs.State.force)
}
 void State::add_force(float value) {
  force_.Add(value);
  // @@protoc_insertion_point(field_add:gymfc.msgs.State.force)
}
 const ::google::protobuf::RepeatedField< float >&
State::force() const {
  // @@protoc_insertion_point(field_list:gymfc.msgs.State.force)
  return force_;
}
 ::google::protobuf::RepeatedField< float >*
State::mutable_force() {
  // @@protoc_insertion_point(field_mutable_list:gymfc.msgs.State.force)
  return &force_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gymfc

// @@protoc_insertion_point(global_scope)
