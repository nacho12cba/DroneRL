// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: State.proto

#ifndef PROTOBUF_State_2eproto__INCLUDED
#define PROTOBUF_State_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace gymfc {
namespace msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_State_2eproto();
void protobuf_AssignDesc_State_2eproto();
void protobuf_ShutdownFile_State_2eproto();

class State;

enum State_StatusCode {
  State_StatusCode_OK = 0,
  State_StatusCode_ERROR = 1
};
bool State_StatusCode_IsValid(int value);
const State_StatusCode State_StatusCode_StatusCode_MIN = State_StatusCode_OK;
const State_StatusCode State_StatusCode_StatusCode_MAX = State_StatusCode_ERROR;
const int State_StatusCode_StatusCode_ARRAYSIZE = State_StatusCode_StatusCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* State_StatusCode_descriptor();
inline const ::std::string& State_StatusCode_Name(State_StatusCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    State_StatusCode_descriptor(), value);
}
inline bool State_StatusCode_Parse(
    const ::std::string& name, State_StatusCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<State_StatusCode>(
    State_StatusCode_descriptor(), name, value);
}
// ===================================================================

class State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gymfc.msgs.State) */ {
 public:
  State();
  virtual ~State();

  State(const State& from);

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const State& default_instance();

  void Swap(State* other);

  // implements Message ----------------------------------------------

  inline State* New() const { return New(NULL); }

  State* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef State_StatusCode StatusCode;
  static const StatusCode OK =
    State_StatusCode_OK;
  static const StatusCode ERROR =
    State_StatusCode_ERROR;
  static inline bool StatusCode_IsValid(int value) {
    return State_StatusCode_IsValid(value);
  }
  static const StatusCode StatusCode_MIN =
    State_StatusCode_StatusCode_MIN;
  static const StatusCode StatusCode_MAX =
    State_StatusCode_StatusCode_MAX;
  static const int StatusCode_ARRAYSIZE =
    State_StatusCode_StatusCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  StatusCode_descriptor() {
    return State_StatusCode_descriptor();
  }
  static inline const ::std::string& StatusCode_Name(StatusCode value) {
    return State_StatusCode_Name(value);
  }
  static inline bool StatusCode_Parse(const ::std::string& name,
      StatusCode* value) {
    return State_StatusCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required float sim_time = 1;
  bool has_sim_time() const;
  void clear_sim_time();
  static const int kSimTimeFieldNumber = 1;
  float sim_time() const;
  void set_sim_time(float value);

  // repeated float imu_angular_velocity_rpy = 2 [packed = true];
  int imu_angular_velocity_rpy_size() const;
  void clear_imu_angular_velocity_rpy();
  static const int kImuAngularVelocityRpyFieldNumber = 2;
  float imu_angular_velocity_rpy(int index) const;
  void set_imu_angular_velocity_rpy(int index, float value);
  void add_imu_angular_velocity_rpy(float value);
  const ::google::protobuf::RepeatedField< float >&
      imu_angular_velocity_rpy() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_imu_angular_velocity_rpy();

  // repeated float imu_linear_acceleration_xyz = 3 [packed = true];
  int imu_linear_acceleration_xyz_size() const;
  void clear_imu_linear_acceleration_xyz();
  static const int kImuLinearAccelerationXyzFieldNumber = 3;
  float imu_linear_acceleration_xyz(int index) const;
  void set_imu_linear_acceleration_xyz(int index, float value);
  void add_imu_linear_acceleration_xyz(float value);
  const ::google::protobuf::RepeatedField< float >&
      imu_linear_acceleration_xyz() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_imu_linear_acceleration_xyz();

  // repeated float imu_orientation_quat = 4 [packed = true];
  int imu_orientation_quat_size() const;
  void clear_imu_orientation_quat();
  static const int kImuOrientationQuatFieldNumber = 4;
  float imu_orientation_quat(int index) const;
  void set_imu_orientation_quat(int index, float value);
  void add_imu_orientation_quat(float value);
  const ::google::protobuf::RepeatedField< float >&
      imu_orientation_quat() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_imu_orientation_quat();

  // repeated float esc_motor_angular_velocity = 5 [packed = true];
  int esc_motor_angular_velocity_size() const;
  void clear_esc_motor_angular_velocity();
  static const int kEscMotorAngularVelocityFieldNumber = 5;
  float esc_motor_angular_velocity(int index) const;
  void set_esc_motor_angular_velocity(int index, float value);
  void add_esc_motor_angular_velocity(float value);
  const ::google::protobuf::RepeatedField< float >&
      esc_motor_angular_velocity() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_esc_motor_angular_velocity();

  // repeated float esc_temperature = 6 [packed = true];
  int esc_temperature_size() const;
  void clear_esc_temperature();
  static const int kEscTemperatureFieldNumber = 6;
  float esc_temperature(int index) const;
  void set_esc_temperature(int index, float value);
  void add_esc_temperature(float value);
  const ::google::protobuf::RepeatedField< float >&
      esc_temperature() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_esc_temperature();

  // repeated float esc_current = 7 [packed = true];
  int esc_current_size() const;
  void clear_esc_current();
  static const int kEscCurrentFieldNumber = 7;
  float esc_current(int index) const;
  void set_esc_current(int index, float value);
  void add_esc_current(float value);
  const ::google::protobuf::RepeatedField< float >&
      esc_current() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_esc_current();

  // repeated float esc_voltage = 8 [packed = true];
  int esc_voltage_size() const;
  void clear_esc_voltage();
  static const int kEscVoltageFieldNumber = 8;
  float esc_voltage(int index) const;
  void set_esc_voltage(int index, float value);
  void add_esc_voltage(float value);
  const ::google::protobuf::RepeatedField< float >&
      esc_voltage() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_esc_voltage();

  // repeated float esc_force = 9 [packed = true];
  int esc_force_size() const;
  void clear_esc_force();
  static const int kEscForceFieldNumber = 9;
  float esc_force(int index) const;
  void set_esc_force(int index, float value);
  void add_esc_force(float value);
  const ::google::protobuf::RepeatedField< float >&
      esc_force() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_esc_force();

  // repeated float esc_torque = 10 [packed = true];
  int esc_torque_size() const;
  void clear_esc_torque();
  static const int kEscTorqueFieldNumber = 10;
  float esc_torque(int index) const;
  void set_esc_torque(int index, float value);
  void add_esc_torque(float value);
  const ::google::protobuf::RepeatedField< float >&
      esc_torque() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_esc_torque();

  // optional float vbat_voltage = 11;
  bool has_vbat_voltage() const;
  void clear_vbat_voltage();
  static const int kVbatVoltageFieldNumber = 11;
  float vbat_voltage() const;
  void set_vbat_voltage(float value);

  // optional float vbat_current = 12;
  bool has_vbat_current() const;
  void clear_vbat_current();
  static const int kVbatCurrentFieldNumber = 12;
  float vbat_current() const;
  void set_vbat_current(float value);

  // required .gymfc.msgs.State.StatusCode status_code = 13;
  bool has_status_code() const;
  void clear_status_code();
  static const int kStatusCodeFieldNumber = 13;
  ::gymfc::msgs::State_StatusCode status_code() const;
  void set_status_code(::gymfc::msgs::State_StatusCode value);

  // repeated float force = 14 [packed = true];
  int force_size() const;
  void clear_force();
  static const int kForceFieldNumber = 14;
  float force(int index) const;
  void set_force(int index, float value);
  void add_force(float value);
  const ::google::protobuf::RepeatedField< float >&
      force() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_force();

  // @@protoc_insertion_point(class_scope:gymfc.msgs.State)
 private:
  inline void set_has_sim_time();
  inline void clear_has_sim_time();
  inline void set_has_vbat_voltage();
  inline void clear_has_vbat_voltage();
  inline void set_has_vbat_current();
  inline void clear_has_vbat_current();
  inline void set_has_status_code();
  inline void clear_has_status_code();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > imu_angular_velocity_rpy_;
  mutable int _imu_angular_velocity_rpy_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > imu_linear_acceleration_xyz_;
  mutable int _imu_linear_acceleration_xyz_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > imu_orientation_quat_;
  mutable int _imu_orientation_quat_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > esc_motor_angular_velocity_;
  mutable int _esc_motor_angular_velocity_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > esc_temperature_;
  mutable int _esc_temperature_cached_byte_size_;
  float sim_time_;
  float vbat_voltage_;
  ::google::protobuf::RepeatedField< float > esc_current_;
  mutable int _esc_current_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > esc_voltage_;
  mutable int _esc_voltage_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > esc_force_;
  mutable int _esc_force_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > esc_torque_;
  mutable int _esc_torque_cached_byte_size_;
  float vbat_current_;
  int status_code_;
  ::google::protobuf::RepeatedField< float > force_;
  mutable int _force_cached_byte_size_;
  friend void  protobuf_AddDesc_State_2eproto();
  friend void protobuf_AssignDesc_State_2eproto();
  friend void protobuf_ShutdownFile_State_2eproto();

  void InitAsDefaultInstance();
  static State* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// State

// required float sim_time = 1;
inline bool State::has_sim_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void State::set_has_sim_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void State::clear_has_sim_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void State::clear_sim_time() {
  sim_time_ = 0;
  clear_has_sim_time();
}
inline float State::sim_time() const {
  // @@protoc_insertion_point(field_get:gymfc.msgs.State.sim_time)
  return sim_time_;
}
inline void State::set_sim_time(float value) {
  set_has_sim_time();
  sim_time_ = value;
  // @@protoc_insertion_point(field_set:gymfc.msgs.State.sim_time)
}

// repeated float imu_angular_velocity_rpy = 2 [packed = true];
inline int State::imu_angular_velocity_rpy_size() const {
  return imu_angular_velocity_rpy_.size();
}
inline void State::clear_imu_angular_velocity_rpy() {
  imu_angular_velocity_rpy_.Clear();
}
inline float State::imu_angular_velocity_rpy(int index) const {
  // @@protoc_insertion_point(field_get:gymfc.msgs.State.imu_angular_velocity_rpy)
  return imu_angular_velocity_rpy_.Get(index);
}
inline void State::set_imu_angular_velocity_rpy(int index, float value) {
  imu_angular_velocity_rpy_.Set(index, value);
  // @@protoc_insertion_point(field_set:gymfc.msgs.State.imu_angular_velocity_rpy)
}
inline void State::add_imu_angular_velocity_rpy(float value) {
  imu_angular_velocity_rpy_.Add(value);
  // @@protoc_insertion_point(field_add:gymfc.msgs.State.imu_angular_velocity_rpy)
}
inline const ::google::protobuf::RepeatedField< float >&
State::imu_angular_velocity_rpy() const {
  // @@protoc_insertion_point(field_list:gymfc.msgs.State.imu_angular_velocity_rpy)
  return imu_angular_velocity_rpy_;
}
inline ::google::protobuf::RepeatedField< float >*
State::mutable_imu_angular_velocity_rpy() {
  // @@protoc_insertion_point(field_mutable_list:gymfc.msgs.State.imu_angular_velocity_rpy)
  return &imu_angular_velocity_rpy_;
}

// repeated float imu_linear_acceleration_xyz = 3 [packed = true];
inline int State::imu_linear_acceleration_xyz_size() const {
  return imu_linear_acceleration_xyz_.size();
}
inline void State::clear_imu_linear_acceleration_xyz() {
  imu_linear_acceleration_xyz_.Clear();
}
inline float State::imu_linear_acceleration_xyz(int index) const {
  // @@protoc_insertion_point(field_get:gymfc.msgs.State.imu_linear_acceleration_xyz)
  return imu_linear_acceleration_xyz_.Get(index);
}
inline void State::set_imu_linear_acceleration_xyz(int index, float value) {
  imu_linear_acceleration_xyz_.Set(index, value);
  // @@protoc_insertion_point(field_set:gymfc.msgs.State.imu_linear_acceleration_xyz)
}
inline void State::add_imu_linear_acceleration_xyz(float value) {
  imu_linear_acceleration_xyz_.Add(value);
  // @@protoc_insertion_point(field_add:gymfc.msgs.State.imu_linear_acceleration_xyz)
}
inline const ::google::protobuf::RepeatedField< float >&
State::imu_linear_acceleration_xyz() const {
  // @@protoc_insertion_point(field_list:gymfc.msgs.State.imu_linear_acceleration_xyz)
  return imu_linear_acceleration_xyz_;
}
inline ::google::protobuf::RepeatedField< float >*
State::mutable_imu_linear_acceleration_xyz() {
  // @@protoc_insertion_point(field_mutable_list:gymfc.msgs.State.imu_linear_acceleration_xyz)
  return &imu_linear_acceleration_xyz_;
}

// repeated float imu_orientation_quat = 4 [packed = true];
inline int State::imu_orientation_quat_size() const {
  return imu_orientation_quat_.size();
}
inline void State::clear_imu_orientation_quat() {
  imu_orientation_quat_.Clear();
}
inline float State::imu_orientation_quat(int index) const {
  // @@protoc_insertion_point(field_get:gymfc.msgs.State.imu_orientation_quat)
  return imu_orientation_quat_.Get(index);
}
inline void State::set_imu_orientation_quat(int index, float value) {
  imu_orientation_quat_.Set(index, value);
  // @@protoc_insertion_point(field_set:gymfc.msgs.State.imu_orientation_quat)
}
inline void State::add_imu_orientation_quat(float value) {
  imu_orientation_quat_.Add(value);
  // @@protoc_insertion_point(field_add:gymfc.msgs.State.imu_orientation_quat)
}
inline const ::google::protobuf::RepeatedField< float >&
State::imu_orientation_quat() const {
  // @@protoc_insertion_point(field_list:gymfc.msgs.State.imu_orientation_quat)
  return imu_orientation_quat_;
}
inline ::google::protobuf::RepeatedField< float >*
State::mutable_imu_orientation_quat() {
  // @@protoc_insertion_point(field_mutable_list:gymfc.msgs.State.imu_orientation_quat)
  return &imu_orientation_quat_;
}

// repeated float esc_motor_angular_velocity = 5 [packed = true];
inline int State::esc_motor_angular_velocity_size() const {
  return esc_motor_angular_velocity_.size();
}
inline void State::clear_esc_motor_angular_velocity() {
  esc_motor_angular_velocity_.Clear();
}
inline float State::esc_motor_angular_velocity(int index) const {
  // @@protoc_insertion_point(field_get:gymfc.msgs.State.esc_motor_angular_velocity)
  return esc_motor_angular_velocity_.Get(index);
}
inline void State::set_esc_motor_angular_velocity(int index, float value) {
  esc_motor_angular_velocity_.Set(index, value);
  // @@protoc_insertion_point(field_set:gymfc.msgs.State.esc_motor_angular_velocity)
}
inline void State::add_esc_motor_angular_velocity(float value) {
  esc_motor_angular_velocity_.Add(value);
  // @@protoc_insertion_point(field_add:gymfc.msgs.State.esc_motor_angular_velocity)
}
inline const ::google::protobuf::RepeatedField< float >&
State::esc_motor_angular_velocity() const {
  // @@protoc_insertion_point(field_list:gymfc.msgs.State.esc_motor_angular_velocity)
  return esc_motor_angular_velocity_;
}
inline ::google::protobuf::RepeatedField< float >*
State::mutable_esc_motor_angular_velocity() {
  // @@protoc_insertion_point(field_mutable_list:gymfc.msgs.State.esc_motor_angular_velocity)
  return &esc_motor_angular_velocity_;
}

// repeated float esc_temperature = 6 [packed = true];
inline int State::esc_temperature_size() const {
  return esc_temperature_.size();
}
inline void State::clear_esc_temperature() {
  esc_temperature_.Clear();
}
inline float State::esc_temperature(int index) const {
  // @@protoc_insertion_point(field_get:gymfc.msgs.State.esc_temperature)
  return esc_temperature_.Get(index);
}
inline void State::set_esc_temperature(int index, float value) {
  esc_temperature_.Set(index, value);
  // @@protoc_insertion_point(field_set:gymfc.msgs.State.esc_temperature)
}
inline void State::add_esc_temperature(float value) {
  esc_temperature_.Add(value);
  // @@protoc_insertion_point(field_add:gymfc.msgs.State.esc_temperature)
}
inline const ::google::protobuf::RepeatedField< float >&
State::esc_temperature() const {
  // @@protoc_insertion_point(field_list:gymfc.msgs.State.esc_temperature)
  return esc_temperature_;
}
inline ::google::protobuf::RepeatedField< float >*
State::mutable_esc_temperature() {
  // @@protoc_insertion_point(field_mutable_list:gymfc.msgs.State.esc_temperature)
  return &esc_temperature_;
}

// repeated float esc_current = 7 [packed = true];
inline int State::esc_current_size() const {
  return esc_current_.size();
}
inline void State::clear_esc_current() {
  esc_current_.Clear();
}
inline float State::esc_current(int index) const {
  // @@protoc_insertion_point(field_get:gymfc.msgs.State.esc_current)
  return esc_current_.Get(index);
}
inline void State::set_esc_current(int index, float value) {
  esc_current_.Set(index, value);
  // @@protoc_insertion_point(field_set:gymfc.msgs.State.esc_current)
}
inline void State::add_esc_current(float value) {
  esc_current_.Add(value);
  // @@protoc_insertion_point(field_add:gymfc.msgs.State.esc_current)
}
inline const ::google::protobuf::RepeatedField< float >&
State::esc_current() const {
  // @@protoc_insertion_point(field_list:gymfc.msgs.State.esc_current)
  return esc_current_;
}
inline ::google::protobuf::RepeatedField< float >*
State::mutable_esc_current() {
  // @@protoc_insertion_point(field_mutable_list:gymfc.msgs.State.esc_current)
  return &esc_current_;
}

// repeated float esc_voltage = 8 [packed = true];
inline int State::esc_voltage_size() const {
  return esc_voltage_.size();
}
inline void State::clear_esc_voltage() {
  esc_voltage_.Clear();
}
inline float State::esc_voltage(int index) const {
  // @@protoc_insertion_point(field_get:gymfc.msgs.State.esc_voltage)
  return esc_voltage_.Get(index);
}
inline void State::set_esc_voltage(int index, float value) {
  esc_voltage_.Set(index, value);
  // @@protoc_insertion_point(field_set:gymfc.msgs.State.esc_voltage)
}
inline void State::add_esc_voltage(float value) {
  esc_voltage_.Add(value);
  // @@protoc_insertion_point(field_add:gymfc.msgs.State.esc_voltage)
}
inline const ::google::protobuf::RepeatedField< float >&
State::esc_voltage() const {
  // @@protoc_insertion_point(field_list:gymfc.msgs.State.esc_voltage)
  return esc_voltage_;
}
inline ::google::protobuf::RepeatedField< float >*
State::mutable_esc_voltage() {
  // @@protoc_insertion_point(field_mutable_list:gymfc.msgs.State.esc_voltage)
  return &esc_voltage_;
}

// repeated float esc_force = 9 [packed = true];
inline int State::esc_force_size() const {
  return esc_force_.size();
}
inline void State::clear_esc_force() {
  esc_force_.Clear();
}
inline float State::esc_force(int index) const {
  // @@protoc_insertion_point(field_get:gymfc.msgs.State.esc_force)
  return esc_force_.Get(index);
}
inline void State::set_esc_force(int index, float value) {
  esc_force_.Set(index, value);
  // @@protoc_insertion_point(field_set:gymfc.msgs.State.esc_force)
}
inline void State::add_esc_force(float value) {
  esc_force_.Add(value);
  // @@protoc_insertion_point(field_add:gymfc.msgs.State.esc_force)
}
inline const ::google::protobuf::RepeatedField< float >&
State::esc_force() const {
  // @@protoc_insertion_point(field_list:gymfc.msgs.State.esc_force)
  return esc_force_;
}
inline ::google::protobuf::RepeatedField< float >*
State::mutable_esc_force() {
  // @@protoc_insertion_point(field_mutable_list:gymfc.msgs.State.esc_force)
  return &esc_force_;
}

// repeated float esc_torque = 10 [packed = true];
inline int State::esc_torque_size() const {
  return esc_torque_.size();
}
inline void State::clear_esc_torque() {
  esc_torque_.Clear();
}
inline float State::esc_torque(int index) const {
  // @@protoc_insertion_point(field_get:gymfc.msgs.State.esc_torque)
  return esc_torque_.Get(index);
}
inline void State::set_esc_torque(int index, float value) {
  esc_torque_.Set(index, value);
  // @@protoc_insertion_point(field_set:gymfc.msgs.State.esc_torque)
}
inline void State::add_esc_torque(float value) {
  esc_torque_.Add(value);
  // @@protoc_insertion_point(field_add:gymfc.msgs.State.esc_torque)
}
inline const ::google::protobuf::RepeatedField< float >&
State::esc_torque() const {
  // @@protoc_insertion_point(field_list:gymfc.msgs.State.esc_torque)
  return esc_torque_;
}
inline ::google::protobuf::RepeatedField< float >*
State::mutable_esc_torque() {
  // @@protoc_insertion_point(field_mutable_list:gymfc.msgs.State.esc_torque)
  return &esc_torque_;
}

// optional float vbat_voltage = 11;
inline bool State::has_vbat_voltage() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void State::set_has_vbat_voltage() {
  _has_bits_[0] |= 0x00000400u;
}
inline void State::clear_has_vbat_voltage() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void State::clear_vbat_voltage() {
  vbat_voltage_ = 0;
  clear_has_vbat_voltage();
}
inline float State::vbat_voltage() const {
  // @@protoc_insertion_point(field_get:gymfc.msgs.State.vbat_voltage)
  return vbat_voltage_;
}
inline void State::set_vbat_voltage(float value) {
  set_has_vbat_voltage();
  vbat_voltage_ = value;
  // @@protoc_insertion_point(field_set:gymfc.msgs.State.vbat_voltage)
}

// optional float vbat_current = 12;
inline bool State::has_vbat_current() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void State::set_has_vbat_current() {
  _has_bits_[0] |= 0x00000800u;
}
inline void State::clear_has_vbat_current() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void State::clear_vbat_current() {
  vbat_current_ = 0;
  clear_has_vbat_current();
}
inline float State::vbat_current() const {
  // @@protoc_insertion_point(field_get:gymfc.msgs.State.vbat_current)
  return vbat_current_;
}
inline void State::set_vbat_current(float value) {
  set_has_vbat_current();
  vbat_current_ = value;
  // @@protoc_insertion_point(field_set:gymfc.msgs.State.vbat_current)
}

// required .gymfc.msgs.State.StatusCode status_code = 13;
inline bool State::has_status_code() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void State::set_has_status_code() {
  _has_bits_[0] |= 0x00001000u;
}
inline void State::clear_has_status_code() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void State::clear_status_code() {
  status_code_ = 0;
  clear_has_status_code();
}
inline ::gymfc::msgs::State_StatusCode State::status_code() const {
  // @@protoc_insertion_point(field_get:gymfc.msgs.State.status_code)
  return static_cast< ::gymfc::msgs::State_StatusCode >(status_code_);
}
inline void State::set_status_code(::gymfc::msgs::State_StatusCode value) {
  assert(::gymfc::msgs::State_StatusCode_IsValid(value));
  set_has_status_code();
  status_code_ = value;
  // @@protoc_insertion_point(field_set:gymfc.msgs.State.status_code)
}

// repeated float force = 14 [packed = true];
inline int State::force_size() const {
  return force_.size();
}
inline void State::clear_force() {
  force_.Clear();
}
inline float State::force(int index) const {
  // @@protoc_insertion_point(field_get:gymfc.msgs.State.force)
  return force_.Get(index);
}
inline void State::set_force(int index, float value) {
  force_.Set(index, value);
  // @@protoc_insertion_point(field_set:gymfc.msgs.State.force)
}
inline void State::add_force(float value) {
  force_.Add(value);
  // @@protoc_insertion_point(field_add:gymfc.msgs.State.force)
}
inline const ::google::protobuf::RepeatedField< float >&
State::force() const {
  // @@protoc_insertion_point(field_list:gymfc.msgs.State.force)
  return force_;
}
inline ::google::protobuf::RepeatedField< float >*
State::mutable_force() {
  // @@protoc_insertion_point(field_mutable_list:gymfc.msgs.State.force)
  return &force_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gymfc

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gymfc::msgs::State_StatusCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gymfc::msgs::State_StatusCode>() {
  return ::gymfc::msgs::State_StatusCode_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_State_2eproto__INCLUDED
