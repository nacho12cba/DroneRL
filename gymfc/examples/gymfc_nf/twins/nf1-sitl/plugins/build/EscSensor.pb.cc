// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EscSensor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EscSensor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sensor_msgs {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* EscSensor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EscSensor_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_EscSensor_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_EscSensor_2eproto() {
  protobuf_AddDesc_EscSensor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "EscSensor.proto");
  GOOGLE_CHECK(file != NULL);
  EscSensor_descriptor_ = file->message_type(0);
  static const int EscSensor_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscSensor, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscSensor, motor_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscSensor, temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscSensor, voltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscSensor, current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscSensor, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscSensor, torque_),
  };
  EscSensor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EscSensor_descriptor_,
      EscSensor::default_instance_,
      EscSensor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscSensor, _has_bits_[0]),
      -1,
      -1,
      sizeof(EscSensor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscSensor, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_EscSensor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EscSensor_descriptor_, &EscSensor::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_EscSensor_2eproto() {
  delete EscSensor::default_instance_;
  delete EscSensor_reflection_;
}

void protobuf_AddDesc_EscSensor_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_EscSensor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017EscSensor.proto\022\020sensor_msgs.msgs\"\202\001\n\t"
    "EscSensor\022\n\n\002id\030\001 \002(\r\022\023\n\013motor_speed\030\002 \002"
    "(\002\022\023\n\013temperature\030\003 \002(\002\022\017\n\007voltage\030\004 \002(\002"
    "\022\017\n\007current\030\005 \002(\002\022\r\n\005force\030\006 \002(\002\022\016\n\006torq"
    "ue\030\007 \002(\002", 168);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EscSensor.proto", &protobuf_RegisterTypes);
  EscSensor::default_instance_ = new EscSensor();
  EscSensor::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EscSensor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EscSensor_2eproto {
  StaticDescriptorInitializer_EscSensor_2eproto() {
    protobuf_AddDesc_EscSensor_2eproto();
  }
} static_descriptor_initializer_EscSensor_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EscSensor::kIdFieldNumber;
const int EscSensor::kMotorSpeedFieldNumber;
const int EscSensor::kTemperatureFieldNumber;
const int EscSensor::kVoltageFieldNumber;
const int EscSensor::kCurrentFieldNumber;
const int EscSensor::kForceFieldNumber;
const int EscSensor::kTorqueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EscSensor::EscSensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensor_msgs.msgs.EscSensor)
}

void EscSensor::InitAsDefaultInstance() {
}

EscSensor::EscSensor(const EscSensor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sensor_msgs.msgs.EscSensor)
}

void EscSensor::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  motor_speed_ = 0;
  temperature_ = 0;
  voltage_ = 0;
  current_ = 0;
  force_ = 0;
  torque_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EscSensor::~EscSensor() {
  // @@protoc_insertion_point(destructor:sensor_msgs.msgs.EscSensor)
  SharedDtor();
}

void EscSensor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EscSensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EscSensor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EscSensor_descriptor_;
}

const EscSensor& EscSensor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EscSensor_2eproto();
  return *default_instance_;
}

EscSensor* EscSensor::default_instance_ = NULL;

EscSensor* EscSensor::New(::google::protobuf::Arena* arena) const {
  EscSensor* n = new EscSensor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EscSensor::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_msgs.msgs.EscSensor)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EscSensor, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EscSensor*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(id_, torque_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EscSensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensor_msgs.msgs.EscSensor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_motor_speed;
        break;
      }

      // required float motor_speed = 2;
      case 2: {
        if (tag == 21) {
         parse_motor_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &motor_speed_)));
          set_has_motor_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_temperature;
        break;
      }

      // required float temperature = 3;
      case 3: {
        if (tag == 29) {
         parse_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temperature_)));
          set_has_temperature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_voltage;
        break;
      }

      // required float voltage = 4;
      case 4: {
        if (tag == 37) {
         parse_voltage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &voltage_)));
          set_has_voltage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_current;
        break;
      }

      // required float current = 5;
      case 5: {
        if (tag == 45) {
         parse_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &current_)));
          set_has_current();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_force;
        break;
      }

      // required float force = 6;
      case 6: {
        if (tag == 53) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &force_)));
          set_has_force();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_torque;
        break;
      }

      // required float torque = 7;
      case 7: {
        if (tag == 61) {
         parse_torque:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &torque_)));
          set_has_torque();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensor_msgs.msgs.EscSensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensor_msgs.msgs.EscSensor)
  return false;
#undef DO_
}

void EscSensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensor_msgs.msgs.EscSensor)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required float motor_speed = 2;
  if (has_motor_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->motor_speed(), output);
  }

  // required float temperature = 3;
  if (has_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->temperature(), output);
  }

  // required float voltage = 4;
  if (has_voltage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->voltage(), output);
  }

  // required float current = 5;
  if (has_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->current(), output);
  }

  // required float force = 6;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->force(), output);
  }

  // required float torque = 7;
  if (has_torque()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->torque(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sensor_msgs.msgs.EscSensor)
}

::google::protobuf::uint8* EscSensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensor_msgs.msgs.EscSensor)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required float motor_speed = 2;
  if (has_motor_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->motor_speed(), target);
  }

  // required float temperature = 3;
  if (has_temperature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->temperature(), target);
  }

  // required float voltage = 4;
  if (has_voltage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->voltage(), target);
  }

  // required float current = 5;
  if (has_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->current(), target);
  }

  // required float force = 6;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->force(), target);
  }

  // required float torque = 7;
  if (has_torque()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->torque(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_msgs.msgs.EscSensor)
  return target;
}

int EscSensor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sensor_msgs.msgs.EscSensor)
  int total_size = 0;

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_motor_speed()) {
    // required float motor_speed = 2;
    total_size += 1 + 4;
  }

  if (has_temperature()) {
    // required float temperature = 3;
    total_size += 1 + 4;
  }

  if (has_voltage()) {
    // required float voltage = 4;
    total_size += 1 + 4;
  }

  if (has_current()) {
    // required float current = 5;
    total_size += 1 + 4;
  }

  if (has_force()) {
    // required float force = 6;
    total_size += 1 + 4;
  }

  if (has_torque()) {
    // required float torque = 7;
    total_size += 1 + 4;
  }

  return total_size;
}
int EscSensor::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_msgs.msgs.EscSensor)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required float motor_speed = 2;
    total_size += 1 + 4;

    // required float temperature = 3;
    total_size += 1 + 4;

    // required float voltage = 4;
    total_size += 1 + 4;

    // required float current = 5;
    total_size += 1 + 4;

    // required float force = 6;
    total_size += 1 + 4;

    // required float torque = 7;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EscSensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensor_msgs.msgs.EscSensor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EscSensor* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EscSensor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensor_msgs.msgs.EscSensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensor_msgs.msgs.EscSensor)
    MergeFrom(*source);
  }
}

void EscSensor::MergeFrom(const EscSensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensor_msgs.msgs.EscSensor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_motor_speed()) {
      set_motor_speed(from.motor_speed());
    }
    if (from.has_temperature()) {
      set_temperature(from.temperature());
    }
    if (from.has_voltage()) {
      set_voltage(from.voltage());
    }
    if (from.has_current()) {
      set_current(from.current());
    }
    if (from.has_force()) {
      set_force(from.force());
    }
    if (from.has_torque()) {
      set_torque(from.torque());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EscSensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensor_msgs.msgs.EscSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EscSensor::CopyFrom(const EscSensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_msgs.msgs.EscSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EscSensor::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void EscSensor::Swap(EscSensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EscSensor::InternalSwap(EscSensor* other) {
  std::swap(id_, other->id_);
  std::swap(motor_speed_, other->motor_speed_);
  std::swap(temperature_, other->temperature_);
  std::swap(voltage_, other->voltage_);
  std::swap(current_, other->current_);
  std::swap(force_, other->force_);
  std::swap(torque_, other->torque_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EscSensor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EscSensor_descriptor_;
  metadata.reflection = EscSensor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EscSensor

// required uint32 id = 1;
bool EscSensor::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EscSensor::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void EscSensor::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void EscSensor::clear_id() {
  id_ = 0u;
  clear_has_id();
}
 ::google::protobuf::uint32 EscSensor::id() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.EscSensor.id)
  return id_;
}
 void EscSensor::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.EscSensor.id)
}

// required float motor_speed = 2;
bool EscSensor::has_motor_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EscSensor::set_has_motor_speed() {
  _has_bits_[0] |= 0x00000002u;
}
void EscSensor::clear_has_motor_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
void EscSensor::clear_motor_speed() {
  motor_speed_ = 0;
  clear_has_motor_speed();
}
 float EscSensor::motor_speed() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.EscSensor.motor_speed)
  return motor_speed_;
}
 void EscSensor::set_motor_speed(float value) {
  set_has_motor_speed();
  motor_speed_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.EscSensor.motor_speed)
}

// required float temperature = 3;
bool EscSensor::has_temperature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EscSensor::set_has_temperature() {
  _has_bits_[0] |= 0x00000004u;
}
void EscSensor::clear_has_temperature() {
  _has_bits_[0] &= ~0x00000004u;
}
void EscSensor::clear_temperature() {
  temperature_ = 0;
  clear_has_temperature();
}
 float EscSensor::temperature() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.EscSensor.temperature)
  return temperature_;
}
 void EscSensor::set_temperature(float value) {
  set_has_temperature();
  temperature_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.EscSensor.temperature)
}

// required float voltage = 4;
bool EscSensor::has_voltage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EscSensor::set_has_voltage() {
  _has_bits_[0] |= 0x00000008u;
}
void EscSensor::clear_has_voltage() {
  _has_bits_[0] &= ~0x00000008u;
}
void EscSensor::clear_voltage() {
  voltage_ = 0;
  clear_has_voltage();
}
 float EscSensor::voltage() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.EscSensor.voltage)
  return voltage_;
}
 void EscSensor::set_voltage(float value) {
  set_has_voltage();
  voltage_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.EscSensor.voltage)
}

// required float current = 5;
bool EscSensor::has_current() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EscSensor::set_has_current() {
  _has_bits_[0] |= 0x00000010u;
}
void EscSensor::clear_has_current() {
  _has_bits_[0] &= ~0x00000010u;
}
void EscSensor::clear_current() {
  current_ = 0;
  clear_has_current();
}
 float EscSensor::current() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.EscSensor.current)
  return current_;
}
 void EscSensor::set_current(float value) {
  set_has_current();
  current_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.EscSensor.current)
}

// required float force = 6;
bool EscSensor::has_force() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void EscSensor::set_has_force() {
  _has_bits_[0] |= 0x00000020u;
}
void EscSensor::clear_has_force() {
  _has_bits_[0] &= ~0x00000020u;
}
void EscSensor::clear_force() {
  force_ = 0;
  clear_has_force();
}
 float EscSensor::force() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.EscSensor.force)
  return force_;
}
 void EscSensor::set_force(float value) {
  set_has_force();
  force_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.EscSensor.force)
}

// required float torque = 7;
bool EscSensor::has_torque() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void EscSensor::set_has_torque() {
  _has_bits_[0] |= 0x00000040u;
}
void EscSensor::clear_has_torque() {
  _has_bits_[0] &= ~0x00000040u;
}
void EscSensor::clear_torque() {
  torque_ = 0;
  clear_has_torque();
}
 float EscSensor::torque() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.EscSensor.torque)
  return torque_;
}
 void EscSensor::set_torque(float value) {
  set_has_torque();
  torque_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.EscSensor.torque)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace sensor_msgs

// @@protoc_insertion_point(global_scope)
